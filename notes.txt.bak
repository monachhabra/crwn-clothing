to add sass : yarn add node-sass
react-router-dom:
npm install react-router-dom@5.0.0


route :
exact : true/false
path : /
element : the component we want to render

in v6 switch is replaced by routes and component is replaced by element




Babel: allows us to convert files into other files that browser can understand
webpack : allows us to convert into conversions 

install 2 packages : webpack webpack-cli
allow us to beging using webpack in our application

yarn add firebase

{
  apiKey: "AIzaSyDte-VK_8z6gstybSax9qNuiA43pIFxcZA",
  authDomain: "crwn-db-ab6c7.firebaseapp.com",
  projectId: "crwn-db-ab6c7",
  storageBucket: "crwn-db-ab6c7.appspot.com",
  messagingSenderId: "946078893768",
  appId: "1:946078893768:web:4db3c992ae045f08fd47fd",
  measurementId: "G-876FYJEJWF"
};


add authentication - firebase and edit the google and enable it and add the email id
firebase add cloud firestore- 
collection: is a group of objects 
firestore.doc('/users/qoL5pNL9h3byBlVF8ugs/cartItems/b0DC7QIza1dpJCqk5sS2');
firestore.collection('/users/qoL5pNL9h3byBlVF8ugs/cartItems');

query reference: does not have the actual data of the collection or document. it has the properties that tells the details about it 
document reference: we use documentRefs object to perform our CRUD methods . the methods are : .set(), .get(), .update(), .delete()
document snapshot : we got this object from documentReference object
documentSnapshot object allows us to check if a document exists at this query using the .exists property which returns a boolean
we can also get the actual data using .data()



Testing:
npm run test


types of test:
1. unit tests : TEST individual function or classes, easy to implement
2. Integration Tests : testing different pieces of code work together eg: database with express app, one function with other function
3. Automation Tests : testing real life scenarios 


redux:

good for managing large state
useful for sharing data between components
predictable state management using 3 principles
1. single source of truth : one single state object. 
2. state is read only : state object cant be modified , u have to create a new state after each action
3. changes using pure functions
pure functions - receive input and always return an output that is predictable.

action :  a user does eg : clicking on button it goes to reducer
root reducer: is a pure function that receives an input and returns output 
store: output is the state which is the entire state of the app. store gets updated and make changes to the view layer (DOM changes)

flux pattern:
action ----- dispatcher ----- store ----- view
dispatcher : dispatches the action to the store which updates the view(one way data flow)

yarn add redux redux-logger react-redux 
redux-logger - middleware


Provider : is the parent component that wrap around the entire application. allows to access related to store 

root-reducer.js : base reducer object that represents all the states (combine all other states together)

a reducer is function that get two properties:
1. a state object(intial state)
2. action : that has type which is of string value, having payload also 

combineReducers is used for combine the multiple reducer at one place that is root reducer
create a store - import createStore and applyMiddleware from redux
import logger from redux-logger
import root-reducer 

store is created using createStore() that accepts rootreducer and the applyMiddleware(spread in all middleware)
action creator: user.action.js

currently header component getting currentUser from app component but we dont want that, pull that from reducer

connect()-  higher order component that lets us modify our component to have access related to redux
a higher order component is a function that take component as arguments and return a new component 
1.mapStateToProps-having state that is the root reducer
2.mapDispatchToProps - 


render - in routing determines what component to return.
Redirect



cart component:


testing example:
mkdir test
cd test
npm init -y
create script.js
jest : npm install jest
npm install --save-dev jest
